import datetime
import os

import matplotlib.pyplot as plt
import numpy as np

from datasets.paths import CAT_DATASET_PATH
from datasets.oldies.LFPDataset import LFPDataset


class CatLFP(LFPDataset):
    def __init__(self, conditions_to_keep=(-1,),
                 channels_to_keep=(-1,),
                 trials_to_keep=(-1,),
                 noisy_channels=(),
                 val_perc=0.20,
                 test_perc=0.0,
                 random_seed=42,
                 nr_bins=256,
                 nr_of_seqs=6,
                 normalization="Zsc",
                 cutoff_freq=50,
                 white_noise_dev=-1):
        super().__init__(CAT_DATASET_PATH, normalization=normalization, cutoff_freq=cutoff_freq,
                         random_seed=random_seed, white_noise_dev=white_noise_dev, nr_bins=nr_bins)

        np.random.seed(random_seed)
        self.normalization = normalization

        self._split_lfp_data()

        self._get_dataset_keep_indexes(channels_to_keep, conditions_to_keep, trials_to_keep, noisy_channels, )
        self._get_train_val_test_split_channel_wise(self.conditions_to_keep, self.channels_to_keep, val_perc, test_perc)

        self._pre_compute_bins()
        self.get_sequences_for_plotting(nr_of_seqs)

        np.random.seed(datetime.datetime.now().microsecond)

    """
    Decides which sequences are used for plotting
    """
    def get_sequences_for_plotting(self, nr_of_seqs):
        self.prediction_sequences = {
            'VAL': [self.get_random_sequence_from('VAL') for _ in range(nr_of_seqs)],
            'TRAIN': [self.get_random_sequence_from('TRAIN') for _ in range(nr_of_seqs)]
        }


    """
    Generates batch_size examples of frame_size length from data
    """

    # TODO do not use classifing
    def frame_generator(self, frame_size, batch_size, classifying, data):
        x = []
        y = []
        while 1:
            random_sequence, _ = self.get_random_sequence(data)
            batch_start = np.random.choice(range(0, random_sequence.size - frame_size))
            frame = random_sequence[batch_start:batch_start + frame_size]
            next_step_value = random_sequence[batch_start + frame_size]
            x.append(frame.reshape(frame_size, 1))
            y.append(self._encode_input_to_bin(next_step_value) if classifying else next_step_value)
            if len(x) == batch_size:
                yield np.array(x), np.array(y)
                x = []
                y = []

    """
    Generators from train, validation and test
    """
    # TODO remove test from everywhere
    def train_frame_generator(self, frame_size, batch_size, classifying):
        return self.frame_generator(frame_size, batch_size, classifying, self.train)

    def validation_frame_generator(self, frame_size, batch_size, classifying):
        return self.frame_generator(frame_size, batch_size, classifying, self.validation)

    def test_frame_generator(self, frame_size, batch_size, classifying):
        return self.frame_generator(frame_size, batch_size, classifying, self.test)

    """
    Gets a full channels sequence using movie trial and channels
    """
    def get_dataset_piece(self, movie, trial, channel):
        return self.all_lfp_data[movie, trial, channel, :]

    """
    Plots signal ...
    """
    def plot_signal(self, movie, trial, channel, start=0, stop=None, save_path=None, show=True):
        if stop is None:
            stop = self.trial_length
        plt.figure(figsize=(16, 12))
        plot_title = "Movie:{}_Channel:{}_Trial:{}_Start:{}_Stop:{}".format(movie, channel, trial, start, stop)
        plt.title(plot_title)
        signal = self.get_dataset_piece(movie, trial, channel)[start:stop]
        plt.plot(signal, label="LFP signal")
        plt.legend()
        if save_path is not None:
            plt.savefig(os.path.join(save_path, "Cat/Plots/{}/{}.png".format(movie, plot_title)))
        if show:
            plt.show()

    def get_random_sequence_from(self, source='VAL'):
        """
        ...
        """
        if source == 'TRAIN':
            data_source = self.train
        elif source == 'VAL':
            data_source = self.validation
        elif source == 'TEST':
            data_source = self.test
        else:
            raise ValueError("Please pick one out of TRAIN, VAL, TEST as data source")

        sequence, sequence_addr = self.get_random_sequence(data_source)
        sequence_addr['SOURCE'] = source
        return sequence, sequence_addr

    def get_random_sequence(self, data_source):
        """Function which receives data source as parameter and chooses randomly and index
        from each of the first 3 dimensions and returns the corresponding sequence
        and a dictionary containing the source indexes

        Args:
            data_source:a 4D numpy array: (movies, trials, channels, nr_samples)
                A random index is chosen from each of the first
                3 dimensions to pick the random sequence

        Returns:
            Random sequence from the datasource

             Dictionary with the format of
             'M': movie_index,
             'T': trial_index,
             'C': channel_index
        """
        movie_index = np.random.choice(data_source.shape[0])
        trial_index = np.random.choice(data_source.shape[1])
        channel_index = np.random.choice(data_source.shape[2])
        return self.get_sequence(movie_index, trial_index, channel_index, data_source)

    """
    Gets a full channels sequence using movie trial and channels
    """
    def get_sequence(self, movie_index, trial_index, channel_index, data_source):
        data_address = {
            'M': movie_index,
            'T': trial_index,
            'C': channel_index
        }
        return data_source[data_address['M'], data_address['T'], data_address['C'], :], data_address


if __name__ == '__main__':
    dataset = CatLFP()
    print(dataset.all_lfp_data.shape)
